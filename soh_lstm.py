# -*- coding: utf-8 -*-
"""SOH_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_Y_rT85oXA6I5QJhGetJKa4_S-sOBcw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import keras
import os
import glob
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/drive/My Drive/dataset')

os.listdir() #確認目錄內容



dir = 'dataset'
listdir = os.listdir()

print(listdir)
print("The number of dataset :", len(listdir))

num = ['B05', 'B07', 'B18', 'B33', 'B34', 'B46', 'B47', 'B48']
for i in range(len(num)):
    vector = np.zeros((1,3))
    path = os.path.join(os.getcwd(), num[i] + '_discharge_soh.csv')
    csv = pd.read_csv(path)
    df = pd.DataFrame(csv)
    
    vec = df[['cycle', 'capacity', 'SOH']]
    
    globals()['data_{}'.format(num[i])] = vec

data = pd.read_csv('B05_discharge_soh.csv')
df = pd.DataFrame(data)
df

data_B05

for i in range(len(num)):
    print("Shape of data :", np.shape(globals()['data_{}'.format(num[i])]))

for i in range(len(num)) :

    dff = globals()['data_{}'.format(num[i])]
    
    sns.set_style("darkgrid")
    plt.figure(figsize=(12, 8))

    plt.scatter(dff['cycle'], dff['capacity'])

    plt.ylabel('Capacity', fontsize = 15)
    plt.xlabel('cycle', fontsize = 15)
    plt.title('Discharge_' + num[i], fontsize = 15)
    plt.savefig('fig/Capacity_' + num[i] + '.jpg')
    plt.show()

from sklearn import linear_model
from numpy.lib import polynomial
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
import scipy

x=[]
for i in range(len(data_B05['SOH'])):
  x.append(i)

print(np.shape(x))
# print(np.shape(y))
x=np.array(x)
y=np.array(data_B05['SOH'])
para=scipy.optimize.curve_fit(lambda t,a,b:a*np.exp(b*(-t)),x,y,p0=None)

total=[]
for i in range(len(x)):
  total.append(para[0][0]*np.exp(para[0][1]*(-i)))
print(total)

data_B05['cycle']

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))


plt.scatter(data_B05['cycle'][0:11000], data_B05['SOH'][0:11000])
plt.scatter(data_B05['cycle'][0:22747], total[0:22747],c='g',s=5)
# plt.scatter(data_B07['cycle'], data_B07['SOH'],label='B07')
# plt.scatter(data_B18['cycle'], data_B18['SOH'],label='B18')
plt.axhline(y=0.8, xmin=0, xmax=175,c='r')
plt.legend(prop={'size': 16})

plt.ylabel('SoH', fontsize = 15)
plt.xlabel('Discharge cycle', fontsize = 15)
plt.title('SoH of Battery', fontsize = 15)
plt.savefig('fig/A_group.jpg')
plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))

plt.scatter(data_B33['cycle'], data_B33['SOH'],label='B33')
plt.scatter(data_B34['cycle'], data_B34['SOH'],label='B34')

plt.legend(prop={'size': 16})

plt.ylabel('SoH', fontsize = 15)
plt.xlabel('Discharge cycle', fontsize = 15)
plt.title('SoH of group B', fontsize = 15)
plt.savefig('fig/B_group.jpg')
plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))

plt.scatter(data_B46['cycle'], data_B46['SOH'],label='B46')
plt.scatter(data_B47['cycle'], data_B47['SOH'],label='B47')
plt.scatter(data_B48['cycle'], data_B48['SOH'],label='B48')

plt.legend(prop={'size': 16})

plt.ylabel('SoH', fontsize = 15)
plt.xlabel('Discharge cycle', fontsize = 15)
plt.title('SoH of group C', fontsize = 15)
plt.savefig('fig/C_group.jpg')
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import keras
import os
import glob
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import math

import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from keras.preprocessing.sequence import TimeseriesGenerator
from keras.models import Sequential
from keras.layers import Dense, LSTM, SimpleRNN, Dropout
from keras import optimizers
from keras.callbacks import ModelCheckpoint, EarlyStopping
from keras.models import model_from_json
from keras import optimizers

import os
os.chdir('/content/drive/My Drive/refined_dataset')

dir = 'refined_dataset'
listdir = os.listdir()

print(listdir)
print("The number of dataset :", len(listdir))

num = ['B05', 'B07', 'B18', 'B33', 'B34', 'B46', 'B47', 'B48']
for i in range(8):
    vector = np.zeros((1,3))
    path = os.path.join(os.getcwd(), num[i] + '_discharge_soh.csv')
    csv = pd.read_csv(path)
    df = pd.DataFrame(csv)
    
    vec = df[['cycle', 'capacity', 'SOH']]
    
    globals()['data_{}'.format(num[i])] = vec

data = pd.read_csv('B05_discharge_soh.csv')
df = pd.DataFrame(data)
df

data_B05

for i in range(8):
    print("Shape of data :", np.shape(globals()['data_{}'.format(num[i])]))

print(listdir)
dataset = data_B05["SOH"]
cycle = data_B05['cycle']

dataset = np.array(dataset)
dataset = dataset.reshape((len(dataset),1))
dataset.shape

train_size = int(len(dataset) * 0.8)
# train_size = int(len(dataset) * 0.7)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    print(len(dataY))
    return np.array(dataX), np.array(dataY)

look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

print(trainX.shape)
print(testX.shape)

model = Sequential()
model.add(LSTM(units = 250,  input_shape = (trainX.shape[1], trainX.shape[2])))

model.add(Dense(1))

model.compile(loss='mae', optimizer='adam',metrics=['accuracy'])

history = model.fit(trainX, trainY, epochs=50, batch_size=20, validation_data=(testX, testY), verbose=1, shuffle = False)

model_json = model.to_json()
open('B05_model.json', 'w').write(model_json)

# save model's learned weights
model.save_weights('B05_weights.h5', overwrite=True)

from keras.models import model_from_json 

json_file = open("B05_model.json", "r")
loaded_model_json = json_file.read() 
json_file.close()
loaded_model = model_from_json(loaded_model_json)
 
# model weight load 
loaded_model.load_weights("B05_weights.h5")
print("Loaded model from disk")

plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.axis([-5, 100, 0, 0.07])
plt.legend() 
plt.show()

yhat = model.predict(testX)
tyhat = model.predict(trainX)
plt.plot(yhat, label='Prediction')
plt.plot(testY, label='Real data')
plt.legend()
plt.show()

print("Shape of train data :", trainX.shape)
print("Shape of prediction :", yhat.shape)
print("Shape of real data :", testY.shape)

rmse = math.sqrt(mean_squared_error(testY, yhat))
mae = mean_absolute_error(testY, yhat)
print('Test RMSE: %.3f' % rmse)
print('Test MAE: %.3f' % mae)

print("Shape of cycle :", np.shape(cycle))

cycle1 = cycle[0:train_size-1]
cycle2 = cycle[train_size+1:len(dataset)]

# cycle1 = cycle[0:train_size]
# cycle2 = cycle[train_size:len(dataset)]

print(np.shape(cycle1), np.shape(cycle2))

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))
plt.plot(cycle1, trainX[:,0],label='Used real data', linewidth = 3, color='r')
plt.plot(cycle2, testY,label='Real data', linewidth = 3, color='b')
# plt.plot(cycle2, yhat[:,0],label='LSTM Prediction', linewidth = 3, color='g')
plt.plot(cycle2, yhat[:,0],label='LSTM Prediction', linewidth = 3, color='g')
plt.legend(prop={'size': 16})

plt.ylabel('SoH', fontsize = 15)
plt.xlabel('Discharge cycle', fontsize = 15)
plt.title(str(num[7]) + " SOH Prediction", fontsize = 15)
plt.savefig(str(num[7]) + '_LSTM.jpg')
plt.show()

a=[]
b=[]
cycle3=[]

for i in range(168):
  # x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.07007113125
  x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.06
  a.append(x)
  cycle3.append(i)

print(a)
print(cycle3)

for i in range(168):
  # x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.07007113125
  x=1-0.5*1.6775*0.00001*i*i-1.2317*0.001*i-0.031621
  b.append(x)
  
print(b)
print(cycle3)

c=[]
for i in range(168):
  # x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.07007113125
  x=1-0.5*3.47975*0.00001*i*i-4.96375*0.0001*i-0.114281
  c.append(x)

d=[]

for i in range(168):
  # x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.07007113125
  x=1-0.5*3.95025*0.00001*i*i+3.303375*0.001*i-0.362891
  d.append(x)
 
e=[]

for i in range(168):
  # x=1-0.5*5.5875*0.000001*i*i-1.682075*0.001*i-0.07007113125
  x=1-0.5*5.7515*0.00001*i*i+5.5817*0.001*i+0.507497
  e.append(x)

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))

plt.scatter(cycle3,a,color='r')

plt.scatter(data_B05['cycle'], data_B05['SOH'],label='B05',color='b')

plt.legend(loc = "lower right")
plt.grid()
plt.rcParams["figure.figsize"] = (10,10)

plt.xlabel('cycle', fontsize=15)
plt.ylabel('SOH', fontsize=15)

plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))


plt.scatter(cycle3,b,color='g')
plt.scatter(data_B07['cycle'], data_B07['SOH'],label='B07',color='b')

plt.legend(loc = "lower right")
plt.grid()
plt.rcParams["figure.figsize"] = (10,10)

plt.xlabel('cycle', fontsize=15)
plt.ylabel('SOH', fontsize=15)

plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))


plt.scatter(cycle3,c,color='y')
plt.scatter(data_B18['cycle'], data_B18['SOH'],label='B18',color='b')

plt.legend(loc = "lower right")
plt.grid()
plt.rcParams["figure.figsize"] = (10,10)

plt.xlabel('cycle', fontsize=15)
plt.ylabel('SOH', fontsize=15)

plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))


plt.scatter(cycle3,d,color='r')
plt.scatter(data_B05['cycle'], data_B05['SOH'],label='B05',color='b')

plt.legend(loc = "lower right")
plt.grid()
plt.rcParams["figure.figsize"] = (10,10)

plt.xlabel('cycle', fontsize=15)
plt.ylabel('SOH', fontsize=15)

plt.show()

sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))


plt.scatter(cycle3,d,color='g')
plt.scatter(data_B07['cycle'], data_B07['SOH'],label='B07',color='b')

plt.legend(loc = "lower right")
plt.grid()
plt.rcParams["figure.figsize"] = (10,10)

plt.xlabel('cycle', fontsize=15)
plt.ylabel('SOH', fontsize=15)

plt.show()

from google.colab import files #匯入套件
import pandas as pd
upload = files.upload() #開啟上傳介面並載入
data = pd.read_csv("70%B05_discharge1_soh.csv")

print(data)

import numpy as np
import matplotlib.pyplot as plt  # for 畫圖用
import pandas as pd

# Import the training set
dataset_train = pd.read_csv('70%B05_discharge1_soh.csv')  # 讀取訓練集
training_set = dataset_train.iloc[:, 8:9].values  # 取「Open」欄位值
print(training_set)

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler()

training_set_scaled = sc.fit_transform(training_set)
print(training_set_scaled[100])

dataset = np.array(training_set)
dataset = dataset.reshape((len(dataset),1))
dataset.shape

train_size = int(len(dataset) * 0.8)
# train_size = int(len(dataset) * 0.7)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    print(len(dataY))
    return np.array(dataX), np.array(dataY)

look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

print(trainX.shape)
print(testX.shape)

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

regressor.add(LSTM(units = 250, return_sequences = True, input_shape = (trainX.shape[1], 1)))


# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 250, return_sequences = True))


# # Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 250, return_sequences = True))
# regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50))

regressor.add(Dense(units = 1))

regressor.compile(optimizer = 'adam', loss = 'mean_absolute_error')

# 進行訓練
regressor.fit(trainX, trainY, epochs = 1000, batch_size = 32)

yhat = regressor.predict(testX)
tyhat = regressor.predict(trainX)
plt.plot(yhat, label='Prediction')
plt.plot(testY, label='Real data')
plt.legend()
plt.show()

print("Shape of train data :", trainX.shape)
print("Shape of prediction :", yhat.shape)
print("Shape of real data :", testY.shape)

cycle1 = data.cycle[0:train_size-1]
cycle2 = data.cycle[train_size+1:len(dataset)]
print(np.shape(cycle1), np.shape(cycle2))

# sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))
plt.plot(cycle1, trainX[:,0],label='Used real data', linewidth = 3, color='r')
plt.plot(cycle2, testY,label='Real data', linewidth = 3, color='b')
# plt.plot(cycle2, yhat[:,0],label='LSTM Prediction', linewidth = 3, color='g')
plt.plot(cycle2, yhat[:,0],label='LSTM Prediction', linewidth = 3, color='g')
plt.legend(prop={'size': 16})

plt.ylabel('SoH', fontsize = 15)
plt.xlabel('Discharge cycle', fontsize = 15)
# plt.title(str(num[7]) + " SOH Prediction", fontsize = 15)
# plt.savefig(str(num[7]) + '_LSTM.jpg')
plt.show()

import math
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

rmse = math.sqrt(mean_squared_error(testY, yhat))
mae = mean_absolute_error(testY, yhat)
print('Test RMSE: %.3f' % rmse)
print('Test MAE: %.3f' % mae)

